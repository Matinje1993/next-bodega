
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  key: 'key',
  name: 'name',
  title: 'title',
  url: 'url',
  parentId: 'parentId',
  image: 'image',
  store: 'store',
  nameAr: 'nameAr',
  nameKa: 'nameKa',
  mediaWeb: 'mediaWeb',
  mediaMobile: 'mediaMobile',
  mediaWebAr: 'mediaWebAr',
  mediaMobileAr: 'mediaMobileAr',
  mediaWebKa: 'mediaWebKa',
  mediaMobileKa: 'mediaMobileKa',
  ctaUrl: 'ctaUrl',
  bgColor: 'bgColor',
  bg_color: 'bg_color',
  thumbnail: 'thumbnail',
  level: 'level',
  count: 'count',
  facetName: 'facetName',
  index: 'index',
  score: 'score'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  ean: 'ean',
  name: 'name',
  type: 'type',
  preorder: 'preorder',
  isExpress: 'isExpress',
  productOrigin: 'productOrigin',
  supplier: 'supplier',
  isBulk: 'isBulk',
  bulkMessage: 'bulkMessage',
  isScalable: 'isScalable',
  size: 'size',
  isFBC: 'isFBC',
  isMarketPlace: 'isMarketPlace',
  foodType: 'foodType',
  productCategoriesHearchi: 'productCategoriesHearchi',
  soldByWeight: 'soldByWeight',
  isRecommendable: 'isRecommendable',
  brandId: 'brandId',
  priceId: 'priceId',
  stockId: 'stockId',
  unitId: 'unitId',
  promoVoucher: 'promoVoucher',
  promoBadges: 'promoBadges',
  amendableOrders: 'amendableOrders',
  servingIntents: 'servingIntents',
  availableVariants: 'availableVariants',
  variants: 'variants',
  linksId: 'linksId',
  availabilityId: 'availabilityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.CategoryOnProductScalarFieldEnum = {
  productId: 'productId',
  categoryId: 'categoryId'
};

exports.Prisma.DeliveryFeeScalarFieldEnum = {
  id: 'id',
  freeDeliveryThreshold: 'freeDeliveryThreshold',
  productId: 'productId'
};

exports.Prisma.PriceScalarFieldEnum = {
  id: 'id',
  currency: 'currency',
  price: 'price',
  formattedValue: 'formattedValue',
  discountId: 'discountId',
  minBuyingValue: 'minBuyingValue'
};

exports.Prisma.DiscountScalarFieldEnum = {
  id: 'id',
  price: 'price',
  endDate: 'endDate',
  type: 'type',
  formattedValue: 'formattedValue',
  value: 'value',
  minBuyingValue: 'minBuyingValue'
};

exports.Prisma.OfferScalarFieldEnum = {
  id: 'id',
  sellerName: 'sellerName',
  shopId: 'shopId',
  type: 'type',
  purchaseIndicators: 'purchaseIndicators',
  shippingIndicator: 'shippingIndicator',
  productId: 'productId'
};

exports.Prisma.StockScalarFieldEnum = {
  id: 'id',
  stockLevelStatus: 'stockLevelStatus',
  value: 'value'
};

exports.Prisma.UnitScalarFieldEnum = {
  id: 'id',
  unitOfMeasure: 'unitOfMeasure',
  itemsPerUnit: 'itemsPerUnit',
  incrementBy: 'incrementBy',
  size: 'size',
  max: 'max',
  min: 'min',
  unitItem: 'unitItem',
  maxToOrder: 'maxToOrder'
};

exports.Prisma.LinksScalarFieldEnum = {
  id: 'id',
  images: 'images',
  productUrl: 'productUrl',
  tracking: 'tracking',
  defaultImages: 'defaultImages'
};

exports.Prisma.AvailabilityScalarFieldEnum = {
  id: 'id',
  isAvailable: 'isAvailable',
  max: 'max'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Category: 'Category',
  Product: 'Product',
  Brand: 'Brand',
  CategoryOnProduct: 'CategoryOnProduct',
  DeliveryFee: 'DeliveryFee',
  Price: 'Price',
  Discount: 'Discount',
  Offer: 'Offer',
  Stock: 'Stock',
  Unit: 'Unit',
  Links: 'Links',
  Availability: 'Availability'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
